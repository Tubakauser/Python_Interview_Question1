#1 question:
"""a = [1,2,3,4]
print(a[3]) #output=4 """
#but when i want to print(a[4]) its shows me index error
#how to solve this problem used the exception
"""try:    
    a = [1,2,3,4]
    print(a[3])
except ZeroDivisionError:
    print("Denominator cannot be 0.")
except IndexError:
    print("Index Out of Bound.")"""
#o/p = 4


#2 question:
#Type error-->
"""a=10
c=10
a1="ten"
c1="sss"
print(a+c)# 20
print(a1+c1)# tensss
print(a+a1)# type error
print(c+c1)# type error"""
#how to handle this program used exception
"""try:
	a=10
	c=10
	a1="ten"
	c1="sss"
	print(a+c)# 20
	print(a1+c1)# tensss
	print(c+a)# type error
	print(c+c1)# type error
except TypeError:
	print("type error")
o/p = 20
tensss
20
type error"""
	

#3: question
#keyerror:
"""dic={'a':1,'b':33,'c':88,'z':44}
print(dic['a'])#-->o/p=1
print(dic['c'])# --->o/p=88
print(dic['x'])# -->o/p= keyerror """
#how to handle this program used exception
"""dic={'a':1,'b':33,'c':88,'z':44}
try:
   print(dic['a'])
   print(dic['c'])
except KeyError:
   print(dic['x'])
o/p = 1
      88"""


#4:question
"""import math
 c=30 
 a=-10 
 print(math.sqrt(c))# o/p-->900
 print(math.sqrt(a))# value error""" 
#how to handle this program used exception"""

"""import math
try:
	c=30 
	a=-10 
	print(math.sqrt(c))# o/p-->900
except ValueError:
    print(math.sqrt(a))# value error
o/p = 5.477225575051661"""


#question 5
#take any your own example 
#create class display the properties
"""class Student:
    student_id = '10'
    student_name = 'John Elder'
    def display():
        print(f'Student id: {Student.student_id}\nStudent Name: {Student.student_name}')
Student.display()
o/p = Student id: 10
      Student Name: John Elder"""


#question 6
#create class child enhance parent some properties
"""class parent(object):
	def __init__(self, name, age):
		self.name = name
		self.age = age
	def display(self):
		print(self.name)
		print(self.age)
class child(parent):
	def __init__(self,name,age,hobby,std):
		self.hobby = hobby
		self.std = std
		parent.__init__(self,name,age)
p = child("John",40,'singing',14)
p.display()
o/p = John
      40"""


#question 7
#create class used the multilevel inheritance
"""lass Grandfather:
	def __init__(self, grandfathername):
		self.grandfathername = grandfathername

class Father(Grandfather):
	def __init__(self, fathername, grandfathername):
		self.fathername = fathername
		Grandfather.__init__(self, grandfathername)

class Son(Father):
	def __init__(self, sonname, fathername, grandfathername):
		self.sonname = sonname
		Father.__init__(self, fathername, grandfathername)
	def print_name(self):
		print(self.grandfathername)
		print(self.fathername)
		print(self.sonname)

s1 = Son('Prince', 'Rampal', 'Lal mani')
print(s1.grandfathername)
s1.print_name()
o/p = Lal mani
Lal mani
Rampal
Prince"""


#create class used the multiple inheritance
"""class Mother:
	#mothername = ""
	def mother(self):
		print(self.mothername)
class Father:
	#fathername = ""
	def father(self):
		print(self.fathername)

class Son(Mother, Father):
	def parents(self):
		print(self.fathername)
		print(self.mothername)

s1 = Son()
s1.fathername = "RAM"
s1.mothername = "SITA"
s1.parents()
o/p = RAM
      SITA"""


#question 8
#diffrence between constructor and method using example
#constructor:
"""class keyboard:
	def __init__(self,language,connection):
		self.language=language
		self.connection=connection

	def defination(self):
		print("keyboard is input device")

	def number_of_key(self):
		print("there are 101 key")

my_keyboard=keyboard('English', 'Wrireless')
print(my_keyboard.language)
print(my_keyboard.connection)
O/P = English
      Wireless"""

#method example
"""class ABC :
	def method_abc (self):
		print("I am in method_abc of ABC class")
c = ABC() 
c.method_abc()
o/p = I am in method_abc of ABC class"""


#question 9
#create class using static method nd class method
#class method:
"""class Student():
    def __init__(self, name, age):
        self.name = name
        self.age = age		
    @classmethod	
    def create(cls, name, age):
        return cls(name, age + 1)
s1 = Student("John", 20)
s2 = Student.create("Johny", 30)
print(s1.age)
print(s2.age)
O/P = 20
      31"""

#static method:
"""class Number():		
    @staticmethod
    def even(x):
        if x % 2 == 0:
            return True
        else:
            return False
print(Number.even(40))
o/p = True"""